define(['knockout'], function (ko) {

	function CovariateSettings(data) {
		var self = this;
		data = data || {};

        self.temporal = ko.observable(data.temporal === 0 ? false : data.temporal || false);
        self.DemographicsGender = ko.observable(data.DemographicsGender === 0 ? false : data.DemographicsGender || false);
        self.DemographicsAge = ko.observable(data.DemographicsAge === 0 ? false : data.DemographicsAge || false);
        self.DemographicsAgeGroup = ko.observable(data.DemographicsAgeGroup === 0 ? false : data.DemographicsAgeGroup || false);
        self.DemographicsRace = ko.observable(data.DemographicsRace === 0 ? false : data.DemographicsRace || false);
        self.DemographicsEthnicity = ko.observable(data.DemographicsEthnicity === 0 ? false : data.DemographicsEthnicity || false);
        self.DemographicsIndexYear = ko.observable(data.DemographicsIndexYear === 0 ? false : data.DemographicsIndexYear || false);
        self.DemographicsIndexMonth = ko.observable(data.DemographicsIndexMonth === 0 ? false : data.DemographicsIndexMonth || false);
        self.DemographicsPriorObservationTime = ko.observable(data.DemographicsPriorObservationTime === 0 ? false : data.DemographicsPriorObservationTime || false);
        self.DemographicsPostObservationTime = ko.observable(data.DemographicsPostObservationTime === 0 ? false : data.DemographicsPostObservationTime || false);
        self.DemographicsTimeInCohort = ko.observable(data.DemographicsTimeInCohort === 0 ? false : data.DemographicsTimeInCohort || false);
        self.DemographicsIndexYearMonth = ko.observable(data.DemographicsIndexYearMonth === 0 ? false : data.DemographicsIndexYearMonth || false);
        self.ConditionOccurrenceAnyTimePrior = ko.observable(data.ConditionOccurrenceAnyTimePrior === 0 ? false : data.ConditionOccurrenceAnyTimePrior || false);
        self.ConditionOccurrenceLongTerm = ko.observable(data.ConditionOccurrenceLongTerm === 0 ? false : data.ConditionOccurrenceLongTerm || false);
        self.ConditionOccurrenceMediumTerm = ko.observable(data.ConditionOccurrenceMediumTerm === 0 ? false : data.ConditionOccurrenceMediumTerm || false);
        self.ConditionOccurrenceShortTerm = ko.observable(data.ConditionOccurrenceShortTerm === 0 ? false : data.ConditionOccurrenceShortTerm || false);
        self.ConditionOccurrencePrimaryInpatientAnyTimePrior = ko.observable(data.ConditionOccurrencePrimaryInpatientAnyTimePrior === 0 ? false : data.ConditionOccurrencePrimaryInpatientAnyTimePrior || false);
        self.ConditionOccurrencePrimaryInpatientLongTerm = ko.observable(data.ConditionOccurrencePrimaryInpatientLongTerm === 0 ? false : data.ConditionOccurrencePrimaryInpatientLongTerm || false);
        self.ConditionOccurrencePrimaryInpatientMediumTerm = ko.observable(data.ConditionOccurrencePrimaryInpatientMediumTerm === 0 ? false : data.ConditionOccurrencePrimaryInpatientMediumTerm || false);
        self.ConditionOccurrencePrimaryInpatientShortTerm = ko.observable(data.ConditionOccurrencePrimaryInpatientShortTerm === 0 ? false : data.ConditionOccurrencePrimaryInpatientShortTerm || false);
        self.ConditionEraAnyTimePrior = ko.observable(data.ConditionEraAnyTimePrior === 0 ? false : data.ConditionEraAnyTimePrior || false);
        self.ConditionEraLongTerm = ko.observable(data.ConditionEraLongTerm === 0 ? false : data.ConditionEraLongTerm || false);
        self.ConditionEraMediumTerm = ko.observable(data.ConditionEraMediumTerm === 0 ? false : data.ConditionEraMediumTerm || false);
        self.ConditionEraShortTerm = ko.observable(data.ConditionEraShortTerm === 0 ? false : data.ConditionEraShortTerm || false);
        self.ConditionEraOverlapping = ko.observable(data.ConditionEraOverlapping === 0 ? false : data.ConditionEraOverlapping || false);
        self.ConditionEraStartLongTerm = ko.observable(data.ConditionEraStartLongTerm === 0 ? false : data.ConditionEraStartLongTerm || false);
        self.ConditionEraStartMediumTerm = ko.observable(data.ConditionEraStartMediumTerm === 0 ? false : data.ConditionEraStartMediumTerm || false);
        self.ConditionEraStartShortTerm = ko.observable(data.ConditionEraStartShortTerm === 0 ? false : data.ConditionEraStartShortTerm || false);
        self.ConditionGroupEraAnyTimePrior = ko.observable(data.ConditionGroupEraAnyTimePrior === 0 ? false : data.ConditionGroupEraAnyTimePrior || false);
        self.ConditionGroupEraLongTerm = ko.observable(data.ConditionGroupEraLongTerm === 0 ? false : data.ConditionGroupEraLongTerm || false);
        self.ConditionGroupEraMediumTerm = ko.observable(data.ConditionGroupEraMediumTerm === 0 ? false : data.ConditionGroupEraMediumTerm || false);
        self.ConditionGroupEraShortTerm = ko.observable(data.ConditionGroupEraShortTerm === 0 ? false : data.ConditionGroupEraShortTerm || false);
        self.ConditionGroupEraOverlapping = ko.observable(data.ConditionGroupEraOverlapping === 0 ? false : data.ConditionGroupEraOverlapping || false);
        self.ConditionGroupEraStartLongTerm = ko.observable(data.ConditionGroupEraStartLongTerm === 0 ? false : data.ConditionGroupEraStartLongTerm || false);
        self.ConditionGroupEraStartMediumTerm = ko.observable(data.ConditionGroupEraStartMediumTerm === 0 ? false : data.ConditionGroupEraStartMediumTerm || false);
        self.ConditionGroupEraStartShortTerm = ko.observable(data.ConditionGroupEraStartShortTerm === 0 ? false : data.ConditionGroupEraStartShortTerm || false);
        self.DrugExposureAnyTimePrior = ko.observable(data.DrugExposureAnyTimePrior === 0 ? false : data.DrugExposureAnyTimePrior || false);
        self.DrugExposureLongTerm = ko.observable(data.DrugExposureLongTerm === 0 ? false : data.DrugExposureLongTerm || false);
        self.DrugExposureMediumTerm = ko.observable(data.DrugExposureMediumTerm === 0 ? false : data.DrugExposureMediumTerm || false);
        self.DrugExposureShortTerm = ko.observable(data.DrugExposureShortTerm === 0 ? false : data.DrugExposureShortTerm || false);
        self.DrugEraAnyTimePrior = ko.observable(data.DrugEraAnyTimePrior === 0 ? false : data.DrugEraAnyTimePrior || false);
        self.DrugEraLongTerm = ko.observable(data.DrugEraLongTerm === 0 ? false : data.DrugEraLongTerm || false);
        self.DrugEraMediumTerm = ko.observable(data.DrugEraMediumTerm === 0 ? false : data.DrugEraMediumTerm || false);
        self.DrugEraShortTerm = ko.observable(data.DrugEraShortTerm === 0 ? false : data.DrugEraShortTerm || false);
        self.DrugEraOverlapping = ko.observable(data.DrugEraOverlapping === 0 ? false : data.DrugEraOverlapping || false);
        self.DrugEraStartLongTerm = ko.observable(data.DrugEraStartLongTerm === 0 ? false : data.DrugEraStartLongTerm || false);
        self.DrugEraStartMediumTerm = ko.observable(data.DrugEraStartMediumTerm === 0 ? false : data.DrugEraStartMediumTerm || false);
        self.DrugEraStartShortTerm = ko.observable(data.DrugEraStartShortTerm === 0 ? false : data.DrugEraStartShortTerm || false);
        self.DrugGroupEraAnyTimePrior = ko.observable(data.DrugGroupEraAnyTimePrior === 0 ? false : data.DrugGroupEraAnyTimePrior || false);
        self.DrugGroupEraLongTerm = ko.observable(data.DrugGroupEraLongTerm === 0 ? false : data.DrugGroupEraLongTerm || false);
        self.DrugGroupEraMediumTerm = ko.observable(data.DrugGroupEraMediumTerm === 0 ? false : data.DrugGroupEraMediumTerm || false);
        self.DrugGroupEraShortTerm = ko.observable(data.DrugGroupEraShortTerm === 0 ? false : data.DrugGroupEraShortTerm || false);
        self.DrugGroupEraOverlapping = ko.observable(data.DrugGroupEraOverlapping === 0 ? false : data.DrugGroupEraOverlapping || false);
        self.DrugGroupEraStartLongTerm = ko.observable(data.DrugGroupEraStartLongTerm === 0 ? false : data.DrugGroupEraStartLongTerm || false);
        self.DrugGroupEraStartMediumTerm = ko.observable(data.DrugGroupEraStartMediumTerm === 0 ? false : data.DrugGroupEraStartMediumTerm || false);
        self.DrugGroupEraStartShortTerm = ko.observable(data.DrugGroupEraStartShortTerm === 0 ? false : data.DrugGroupEraStartShortTerm || false);
        self.ProcedureOccurrenceAnyTimePrior = ko.observable(data.ProcedureOccurrenceAnyTimePrior === 0 ? false : data.ProcedureOccurrenceAnyTimePrior || false);
        self.ProcedureOccurrenceLongTerm = ko.observable(data.ProcedureOccurrenceLongTerm === 0 ? false : data.ProcedureOccurrenceLongTerm || false);
        self.ProcedureOccurrenceMediumTerm = ko.observable(data.ProcedureOccurrenceMediumTerm === 0 ? false : data.ProcedureOccurrenceMediumTerm || false);
        self.ProcedureOccurrenceShortTerm = ko.observable(data.ProcedureOccurrenceShortTerm === 0 ? false : data.ProcedureOccurrenceShortTerm || false);
        self.DeviceExposureAnyTimePrior = ko.observable(data.DeviceExposureAnyTimePrior === 0 ? false : data.DeviceExposureAnyTimePrior || false);
        self.DeviceExposureLongTerm = ko.observable(data.DeviceExposureLongTerm === 0 ? false : data.DeviceExposureLongTerm || false);
        self.DeviceExposureMediumTerm = ko.observable(data.DeviceExposureMediumTerm === 0 ? false : data.DeviceExposureMediumTerm || false);
        self.DeviceExposureShortTerm = ko.observable(data.DeviceExposureShortTerm === 0 ? false : data.DeviceExposureShortTerm || false);
        self.MeasurementAnyTimePrior = ko.observable(data.MeasurementAnyTimePrior === 0 ? false : data.MeasurementAnyTimePrior || false);
        self.MeasurementLongTerm = ko.observable(data.MeasurementLongTerm === 0 ? false : data.MeasurementLongTerm || false);
        self.MeasurementMediumTerm = ko.observable(data.MeasurementMediumTerm === 0 ? false : data.MeasurementMediumTerm || false);
        self.MeasurementShortTerm = ko.observable(data.MeasurementShortTerm === 0 ? false : data.MeasurementShortTerm || false);
        self.MeasurementValueAnyTimePrior = ko.observable(data.MeasurementValueAnyTimePrior === 0 ? false : data.MeasurementValueAnyTimePrior || false);
        self.MeasurementValueLongTerm = ko.observable(data.MeasurementValueLongTerm === 0 ? false : data.MeasurementValueLongTerm || false);
        self.MeasurementValueMediumTerm = ko.observable(data.MeasurementValueMediumTerm === 0 ? false : data.MeasurementValueMediumTerm || false);
        self.MeasurementValueShortTerm = ko.observable(data.MeasurementValueShortTerm === 0 ? false : data.MeasurementValueShortTerm || false);
        self.MeasurementRangeGroupAnyTimePrior = ko.observable(data.MeasurementRangeGroupAnyTimePrior === 0 ? false : data.MeasurementRangeGroupAnyTimePrior || false);
        self.MeasurementRangeGroupLongTerm = ko.observable(data.MeasurementRangeGroupLongTerm === 0 ? false : data.MeasurementRangeGroupLongTerm || false);
        self.MeasurementRangeGroupMediumTerm = ko.observable(data.MeasurementRangeGroupMediumTerm === 0 ? false : data.MeasurementRangeGroupMediumTerm || false);
        self.MeasurementRangeGroupShortTerm = ko.observable(data.MeasurementRangeGroupShortTerm === 0 ? false : data.MeasurementRangeGroupShortTerm || false);
        self.ObservationAnyTimePrior = ko.observable(data.ObservationAnyTimePrior === 0 ? false : data.ObservationAnyTimePrior || false);
        self.ObservationLongTerm = ko.observable(data.ObservationLongTerm === 0 ? false : data.ObservationLongTerm || false);
        self.ObservationMediumTerm = ko.observable(data.ObservationMediumTerm === 0 ? false : data.ObservationMediumTerm || false);
        self.ObservationShortTerm = ko.observable(data.ObservationShortTerm === 0 ? false : data.ObservationShortTerm || false);
        self.CharlsonIndex = ko.observable(data.CharlsonIndex === 0 ? false : data.CharlsonIndex || false);
        self.Dcsi = ko.observable(data.Dcsi === 0 ? false : data.Dcsi || false);
        self.Chads2 = ko.observable(data.Chads2 === 0 ? false : data.Chads2 || false);
        self.Chads2Vasc = ko.observable(data.Chads2Vasc === 0 ? false : data.Chads2Vasc || false);
        self.DistinctConditionCountLongTerm = ko.observable(data.DistinctConditionCountLongTerm === 0 ? false : data.DistinctConditionCountLongTerm || false);
        self.DistinctConditionCountMediumTerm = ko.observable(data.DistinctConditionCountMediumTerm === 0 ? false : data.DistinctConditionCountMediumTerm || false);
        self.DistinctConditionCountShortTerm = ko.observable(data.DistinctConditionCountShortTerm === 0 ? false : data.DistinctConditionCountShortTerm || false);
        self.DistinctIngredientCountLongTerm = ko.observable(data.DistinctIngredientCountLongTerm === 0 ? false : data.DistinctIngredientCountLongTerm || false);
        self.DistinctIngredientCountMediumTerm = ko.observable(data.DistinctIngredientCountMediumTerm === 0 ? false : data.DistinctIngredientCountMediumTerm || false);
        self.DistinctIngredientCountShortTerm = ko.observable(data.DistinctIngredientCountShortTerm === 0 ? false : data.DistinctIngredientCountShortTerm || false);
        self.DistinctProcedureCountLongTerm = ko.observable(data.DistinctProcedureCountLongTerm === 0 ? false : data.DistinctProcedureCountLongTerm || false);
        self.DistinctProcedureCountMediumTerm = ko.observable(data.DistinctProcedureCountMediumTerm === 0 ? false : data.DistinctProcedureCountMediumTerm || false);
        self.DistinctProcedureCountShortTerm = ko.observable(data.DistinctProcedureCountShortTerm === 0 ? false : data.DistinctProcedureCountShortTerm || false);
        self.DistinctMeasurementCountLongTerm = ko.observable(data.DistinctMeasurementCountLongTerm === 0 ? false : data.DistinctMeasurementCountLongTerm || false);
        self.DistinctMeasurementCountMediumTerm = ko.observable(data.DistinctMeasurementCountMediumTerm === 0 ? false : data.DistinctMeasurementCountMediumTerm || false);
        self.DistinctMeasurementCountShortTerm = ko.observable(data.DistinctMeasurementCountShortTerm === 0 ? false : data.DistinctMeasurementCountShortTerm || false);
        self.DistinctObservationCountLongTerm = ko.observable(data.DistinctObservationCountLongTerm === 0 ? false : data.DistinctObservationCountLongTerm || false);
        self.DistinctObservationCountMediumTerm = ko.observable(data.DistinctObservationCountMediumTerm === 0 ? false : data.DistinctObservationCountMediumTerm || false);
        self.DistinctObservationCountShortTerm = ko.observable(data.DistinctObservationCountShortTerm === 0 ? false : data.DistinctObservationCountShortTerm || false);
        self.VisitCountLongTerm = ko.observable(data.VisitCountLongTerm === 0 ? false : data.VisitCountLongTerm || false);
        self.VisitCountMediumTerm = ko.observable(data.VisitCountMediumTerm === 0 ? false : data.VisitCountMediumTerm || false);
        self.VisitCountShortTerm = ko.observable(data.VisitCountShortTerm === 0 ? false : data.VisitCountShortTerm || false);
        self.VisitConceptCountLongTerm = ko.observable(data.VisitConceptCountLongTerm === 0 ? false : data.VisitConceptCountLongTerm || false);
        self.VisitConceptCountMediumTerm = ko.observable(data.VisitConceptCountMediumTerm === 0 ? false : data.VisitConceptCountMediumTerm || false);
        self.VisitConceptCountShortTerm = ko.observable(data.VisitConceptCountShortTerm === 0 ? false : data.VisitConceptCountShortTerm || false);
        self.longTermStartDays = ko.observable(data.longTermStartDays || -365);
        self.mediumTermStartDays = ko.observable(data.mediumTermStartDays || -180);
        self.shortTermStartDays = ko.observable(data.shortTermStartDays || -30);
        self.endDays = ko.observable(data.endDays || 0);
        self.includedCovariateConceptIds = ko.observableArray((data.includedCovariateConceptIds && Array.isArray(data.includedCovariateConceptIds)) ? data.includedCovariateConceptIds : []);
        self.includedCovariateConceptSet = ko.observable(data.includedCovariateConceptSet || {});
        self.addDescendantsToInclude = ko.observable(data.addDescendantsToInclude === 0 ? false : data.addDescendantsToInclude  || false);
        self.excludedCovariateConceptIds = ko.observableArray((data.excludedCovariateConceptIds && Array.isArray(data.excludedCovariateConceptIds)) ? data.excludedCovariateConceptIds : []);
        self.excludedCovariateConceptSet = ko.observable(data.excludedCovariateConceptSet || {});
        self.addDescendantsToExclude = ko.observable(data.addDescendantsToExclude === 0 ? false : data.addDescendantsToExclude || false);
        self.includedCovariateIds = ko.observableArray((data.includedCovariateIds && Array.isArray(data.includedCovariateIds)) ? data.includedCovariateIds : []);
        self.attr_fun = data.attr_fun || "getDbDefaultCovariateData";
        self.attr_class = data.attr_class || "covariateSettings";
	}
	
	return CovariateSettings;
});