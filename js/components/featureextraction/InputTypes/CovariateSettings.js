define(['knockout'], function (ko) {

	function CovariateSettings(data) {
		var self = this;
		data = data || {};

        self.useDemographicsGender = ko.observable(data.useDemographicsGender === 0 ? 0 : data.useDemographicsGender || 0);
        self.useDemographicsAge = ko.observable(data.useDemographicsAge === 0 ? 0 : data.useDemographicsAge || 0);
        self.useDemographicsAgeGroup = ko.observable(data.useDemographicsAgeGroup === 0 ? 0 : data.useDemographicsAgeGroup || 0);
        self.useDemographicsRace = ko.observable(data.useDemographicsRace === 0 ? 0 : data.useDemographicsRace || 0);
        self.useDemographicsEthnicity = ko.observable(data.useDemographicsEthnicity === 0 ? 0 : data.useDemographicsEthnicity || 0);
        self.useDemographicsIndexYear = ko.observable(data.useDemographicsIndexYear === 0 ? 0 : data.useDemographicsIndexYear || 0);
        self.useDemographicsIndexMonth = ko.observable(data.useDemographicsIndexMonth === 0 ? 0 : data.useDemographicsIndexMonth || 0);
        self.useDemographicsPriorObservationTime = ko.observable(data.useDemographicsPriorObservationTime === 0 ? 0 : data.useDemographicsPriorObservationTime || 0);
        self.useDemographicsPostObservationTime = ko.observable(data.useDemographicsPostObservationTime === 0 ? 0 : data.useDemographicsPostObservationTime || 0);
        self.useDemographicsTimeInCohort = ko.observable(data.useDemographicsTimeInCohort === 0 ? 0 : data.useDemographicsTimeInCohort || 0);
        self.useDemographicsIndexYearMonth = ko.observable(data.useDemographicsIndexYearMonth === 0 ? 0 : data.useDemographicsIndexYearMonth || 0);
        self.useConditionOccurrenceAnyTimePrior = ko.observable(data.useConditionOccurrenceAnyTimePrior === 0 ? 0 : data.useConditionOccurrenceAnyTimePrior || 0);
        self.useConditionOccurrenceLongTerm = ko.observable(data.useConditionOccurrenceLongTerm === 0 ? 0 : data.useConditionOccurrenceLongTerm || 0);
        self.useConditionOccurrenceMediumTerm = ko.observable(data.useConditionOccurrenceMediumTerm === 0 ? 0 : data.useConditionOccurrenceMediumTerm || 0);
        self.useConditionOccurrenceShortTerm = ko.observable(data.useConditionOccurrenceShortTerm === 0 ? 0 : data.useConditionOccurrenceShortTerm || 0);
        self.useConditionOccurrencePrimaryInpatientAnyTimePrior = ko.observable(data.useConditionOccurrencePrimaryInpatientAnyTimePrior === 0 ? 0 : data.useConditionOccurrencePrimaryInpatientAnyTimePrior || 0);
        self.useConditionOccurrencePrimaryInpatientLongTerm = ko.observable(data.useConditionOccurrencePrimaryInpatientLongTerm === 0 ? 0 : data.useConditionOccurrencePrimaryInpatientLongTerm || 0);
        self.useConditionOccurrencePrimaryInpatientMediumTerm = ko.observable(data.useConditionOccurrencePrimaryInpatientMediumTerm === 0 ? 0 : data.useConditionOccurrencePrimaryInpatientMediumTerm || 0);
        self.useConditionOccurrencePrimaryInpatientShortTerm = ko.observable(data.useConditionOccurrencePrimaryInpatientShortTerm === 0 ? 0 : data.useConditionOccurrencePrimaryInpatientShortTerm || 0);
        self.useConditionEraAnyTimePrior = ko.observable(data.useConditionEraAnyTimePrior === 0 ? 0 : data.useConditionEraAnyTimePrior || 0);
        self.useConditionEraLongTerm = ko.observable(data.useConditionEraLongTerm === 0 ? 0 : data.useConditionEraLongTerm || 0);
        self.useConditionEraMediumTerm = ko.observable(data.useConditionEraMediumTerm === 0 ? 0 : data.useConditionEraMediumTerm || 0);
        self.useConditionEraShortTerm = ko.observable(data.useConditionEraShortTerm === 0 ? 0 : data.useConditionEraShortTerm || 0);
        self.useConditionEraOverlapping = ko.observable(data.useConditionEraOverlapping === 0 ? 0 : data.useConditionEraOverlapping || 0);
        self.useConditionEraStartLongTerm = ko.observable(data.useConditionEraStartLongTerm === 0 ? 0 : data.useConditionEraStartLongTerm || 0);
        self.useConditionEraStartMediumTerm = ko.observable(data.useConditionEraStartMediumTerm === 0 ? 0 : data.useConditionEraStartMediumTerm || 0);
        self.useConditionEraStartShortTerm = ko.observable(data.useConditionEraStartShortTerm === 0 ? 0 : data.useConditionEraStartShortTerm || 0);
        self.useConditionGroupEraAnyTimePrior = ko.observable(data.useConditionGroupEraAnyTimePrior === 0 ? 0 : data.useConditionGroupEraAnyTimePrior || 0);
        self.useConditionGroupEraLongTerm = ko.observable(data.useConditionGroupEraLongTerm === 0 ? 0 : data.useConditionGroupEraLongTerm || 0);
        self.useConditionGroupEraMediumTerm = ko.observable(data.useConditionGroupEraMediumTerm === 0 ? 0 : data.useConditionGroupEraMediumTerm || 0);
        self.useConditionGroupEraShortTerm = ko.observable(data.useConditionGroupEraShortTerm === 0 ? 0 : data.useConditionGroupEraShortTerm || 0);
        self.useConditionGroupEraOverlapping = ko.observable(data.useConditionGroupEraOverlapping === 0 ? 0 : data.useConditionGroupEraOverlapping || 0);
        self.useConditionGroupEraStartLongTerm = ko.observable(data.useConditionGroupEraStartLongTerm === 0 ? 0 : data.useConditionGroupEraStartLongTerm || 0);
        self.useConditionGroupEraStartMediumTerm = ko.observable(data.useConditionGroupEraStartMediumTerm === 0 ? 0 : data.useConditionGroupEraStartMediumTerm || 0);
        self.useConditionGroupEraStartShortTerm = ko.observable(data.useConditionGroupEraStartShortTerm === 0 ? 0 : data.useConditionGroupEraStartShortTerm || 0);
        self.useDrugExposureAnyTimePrior = ko.observable(data.useDrugExposureAnyTimePrior === 0 ? 0 : data.useDrugExposureAnyTimePrior || 0);
        self.useDrugExposureLongTerm = ko.observable(data.useDrugExposureLongTerm === 0 ? 0 : data.useDrugExposureLongTerm || 0);
        self.useDrugExposureMediumTerm = ko.observable(data.useDrugExposureMediumTerm === 0 ? 0 : data.useDrugExposureMediumTerm || 0);
        self.useDrugExposureShortTerm = ko.observable(data.useDrugExposureShortTerm === 0 ? 0 : data.useDrugExposureShortTerm || 0);
        self.useDrugEraAnyTimePrior = ko.observable(data.useDrugEraAnyTimePrior === 0 ? 0 : data.useDrugEraAnyTimePrior || 0);
        self.useDrugEraLongTerm = ko.observable(data.useDrugEraLongTerm === 0 ? 0 : data.useDrugEraLongTerm || 0);
        self.useDrugEraMediumTerm = ko.observable(data.useDrugEraMediumTerm === 0 ? 0 : data.useDrugEraMediumTerm || 0);
        self.useDrugEraShortTerm = ko.observable(data.useDrugEraShortTerm === 0 ? 0 : data.useDrugEraShortTerm || 0);
        self.useDrugEraOverlapping = ko.observable(data.useDrugEraOverlapping === 0 ? 0 : data.useDrugEraOverlapping || 0);
        self.useDrugEraStartLongTerm = ko.observable(data.useDrugEraStartLongTerm === 0 ? 0 : data.useDrugEraStartLongTerm || 0);
        self.useDrugEraStartMediumTerm = ko.observable(data.useDrugEraStartMediumTerm === 0 ? 0 : data.useDrugEraStartMediumTerm || 0);
        self.useDrugEraStartShortTerm = ko.observable(data.useDrugEraStartShortTerm === 0 ? 0 : data.useDrugEraStartShortTerm || 0);
        self.useDrugGroupEraAnyTimePrior = ko.observable(data.useDrugGroupEraAnyTimePrior === 0 ? 0 : data.useDrugGroupEraAnyTimePrior || 0);
        self.useDrugGroupEraLongTerm = ko.observable(data.useDrugGroupEraLongTerm === 0 ? 0 : data.useDrugGroupEraLongTerm || 0);
        self.useDrugGroupEraMediumTerm = ko.observable(data.useDrugGroupEraMediumTerm === 0 ? 0 : data.useDrugGroupEraMediumTerm || 0);
        self.useDrugGroupEraShortTerm = ko.observable(data.useDrugGroupEraShortTerm === 0 ? 0 : data.useDrugGroupEraShortTerm || 0);
        self.useDrugGroupEraOverlapping = ko.observable(data.useDrugGroupEraOverlapping === 0 ? 0 : data.useDrugGroupEraOverlapping || 0);
        self.useDrugGroupEraStartLongTerm = ko.observable(data.useDrugGroupEraStartLongTerm === 0 ? 0 : data.useDrugGroupEraStartLongTerm || 0);
        self.useDrugGroupEraStartMediumTerm = ko.observable(data.useDrugGroupEraStartMediumTerm === 0 ? 0 : data.useDrugGroupEraStartMediumTerm || 0);
        self.useDrugGroupEraStartShortTerm = ko.observable(data.useDrugGroupEraStartShortTerm === 0 ? 0 : data.useDrugGroupEraStartShortTerm || 0);
        self.useProcedureOccurrenceAnyTimePrior = ko.observable(data.useProcedureOccurrenceAnyTimePrior === 0 ? 0 : data.useProcedureOccurrenceAnyTimePrior || 0);
        self.useProcedureOccurrenceLongTerm = ko.observable(data.useProcedureOccurrenceLongTerm === 0 ? 0 : data.useProcedureOccurrenceLongTerm || 0);
        self.useProcedureOccurrenceMediumTerm = ko.observable(data.useProcedureOccurrenceMediumTerm === 0 ? 0 : data.useProcedureOccurrenceMediumTerm || 0);
        self.useProcedureOccurrenceShortTerm = ko.observable(data.useProcedureOccurrenceShortTerm === 0 ? 0 : data.useProcedureOccurrenceShortTerm || 0);
        self.useDeviceExposureAnyTimePrior = ko.observable(data.useDeviceExposureAnyTimePrior === 0 ? 0 : data.useDeviceExposureAnyTimePrior || 0);
        self.useDeviceExposureLongTerm = ko.observable(data.useDeviceExposureLongTerm === 0 ? 0 : data.useDeviceExposureLongTerm || 0);
        self.useDeviceExposureMediumTerm = ko.observable(data.useDeviceExposureMediumTerm === 0 ? 0 : data.useDeviceExposureMediumTerm || 0);
        self.useDeviceExposureShortTerm = ko.observable(data.useDeviceExposureShortTerm === 0 ? 0 : data.useDeviceExposureShortTerm || 0);
        self.useMeasurementAnyTimePrior = ko.observable(data.useMeasurementAnyTimePrior === 0 ? 0 : data.useMeasurementAnyTimePrior || 0);
        self.useMeasurementLongTerm = ko.observable(data.useMeasurementLongTerm === 0 ? 0 : data.useMeasurementLongTerm || 0);
        self.useMeasurementMediumTerm = ko.observable(data.useMeasurementMediumTerm === 0 ? 0 : data.useMeasurementMediumTerm || 0);
        self.useMeasurementShortTerm = ko.observable(data.useMeasurementShortTerm === 0 ? 0 : data.useMeasurementShortTerm || 0);
        self.useMeasurementValueAnyTimePrior = ko.observable(data.useMeasurementValueAnyTimePrior === 0 ? 0 : data.useMeasurementValueAnyTimePrior || 0);
        self.useMeasurementValueLongTerm = ko.observable(data.useMeasurementValueLongTerm === 0 ? 0 : data.useMeasurementValueLongTerm || 0);
        self.useMeasurementValueMediumTerm = ko.observable(data.useMeasurementValueMediumTerm === 0 ? 0 : data.useMeasurementValueMediumTerm || 0);
        self.useMeasurementValueShortTerm = ko.observable(data.useMeasurementValueShortTerm === 0 ? 0 : data.useMeasurementValueShortTerm || 0);
        self.useMeasurementRangeGroupAnyTimePrior = ko.observable(data.useMeasurementRangeGroupAnyTimePrior === 0 ? 0 : data.useMeasurementRangeGroupAnyTimePrior || 0);
        self.useMeasurementRangeGroupLongTerm = ko.observable(data.useMeasurementRangeGroupLongTerm === 0 ? 0 : data.useMeasurementRangeGroupLongTerm || 0);
        self.useMeasurementRangeGroupMediumTerm = ko.observable(data.useMeasurementRangeGroupMediumTerm === 0 ? 0 : data.useMeasurementRangeGroupMediumTerm || 0);
        self.useMeasurementRangeGroupShortTerm = ko.observable(data.useMeasurementRangeGroupShortTerm === 0 ? 0 : data.useMeasurementRangeGroupShortTerm || 0);
        self.useObservationAnyTimePrior = ko.observable(data.useObservationAnyTimePrior === 0 ? 0 : data.useObservationAnyTimePrior || 0);
        self.useObservationLongTerm = ko.observable(data.useObservationLongTerm === 0 ? 0 : data.useObservationLongTerm || 0);
        self.useObservationMediumTerm = ko.observable(data.useObservationMediumTerm === 0 ? 0 : data.useObservationMediumTerm || 0);
        self.useObservationShortTerm = ko.observable(data.useObservationShortTerm === 0 ? 0 : data.useObservationShortTerm || 0);
        self.useCharlsonIndex = ko.observable(data.useCharlsonIndex === 0 ? 0 : data.useCharlsonIndex || 0);
        self.useDcsi = ko.observable(data.useDcsi === 0 ? 0 : data.useDcsi || 0);
        self.useChads2 = ko.observable(data.useChads2 === 0 ? 0 : data.useChads2 || 0);
        self.useChads2Vasc = ko.observable(data.useChads2Vasc === 0 ? 0 : data.useChads2Vasc || 0);
        self.useDistinctConditionCountLongTerm = ko.observable(data.useDistinctConditionCountLongTerm === 0 ? 0 : data.useDistinctConditionCountLongTerm || 0);
        self.useDistinctConditionCountMediumTerm = ko.observable(data.useDistinctConditionCountMediumTerm === 0 ? 0 : data.useDistinctConditionCountMediumTerm || 0);
        self.useDistinctConditionCountShortTerm = ko.observable(data.useDistinctConditionCountShortTerm === 0 ? 0 : data.useDistinctConditionCountShortTerm || 0);
        self.useDistinctIngredientCountLongTerm = ko.observable(data.useDistinctIngredientCountLongTerm === 0 ? 0 : data.useDistinctIngredientCountLongTerm || 0);
        self.useDistinctIngredientCountMediumTerm = ko.observable(data.useDistinctIngredientCountMediumTerm === 0 ? 0 : data.useDistinctIngredientCountMediumTerm || 0);
        self.useDistinctIngredientCountShortTerm = ko.observable(data.useDistinctIngredientCountShortTerm === 0 ? 0 : data.useDistinctIngredientCountShortTerm || 0);
        self.useDistinctProcedureCountLongTerm = ko.observable(data.useDistinctProcedureCountLongTerm === 0 ? 0 : data.useDistinctProcedureCountLongTerm || 0);
        self.useDistinctProcedureCountMediumTerm = ko.observable(data.useDistinctProcedureCountMediumTerm === 0 ? 0 : data.useDistinctProcedureCountMediumTerm || 0);
        self.useDistinctProcedureCountShortTerm = ko.observable(data.useDistinctProcedureCountShortTerm === 0 ? 0 : data.useDistinctProcedureCountShortTerm || 0);
        self.useDistinctMeasurementCountLongTerm = ko.observable(data.useDistinctMeasurementCountLongTerm === 0 ? 0 : data.useDistinctMeasurementCountLongTerm || 0);
        self.useDistinctMeasurementCountMediumTerm = ko.observable(data.useDistinctMeasurementCountMediumTerm === 0 ? 0 : data.useDistinctMeasurementCountMediumTerm || 0);
        self.useDistinctMeasurementCountShortTerm = ko.observable(data.useDistinctMeasurementCountShortTerm === 0 ? 0 : data.useDistinctMeasurementCountShortTerm || 0);
        self.useDistinctObservationCountLongTerm = ko.observable(data.useDistinctObservationCountLongTerm === 0 ? 0 : data.useDistinctObservationCountLongTerm || 0);
        self.useDistinctObservationCountMediumTerm = ko.observable(data.useDistinctObservationCountMediumTerm === 0 ? 0 : data.useDistinctObservationCountMediumTerm || 0);
        self.useDistinctObservationCountShortTerm = ko.observable(data.useDistinctObservationCountShortTerm === 0 ? 0 : data.useDistinctObservationCountShortTerm || 0);
        self.useVisitCountLongTerm = ko.observable(data.useVisitCountLongTerm === 0 ? 0 : data.useVisitCountLongTerm || 0);
        self.useVisitCountMediumTerm = ko.observable(data.useVisitCountMediumTerm === 0 ? 0 : data.useVisitCountMediumTerm || 0);
        self.useVisitCountShortTerm = ko.observable(data.useVisitCountShortTerm === 0 ? 0 : data.useVisitCountShortTerm || 0);
        self.useVisitConceptCountLongTerm = ko.observable(data.useVisitConceptCountLongTerm === 0 ? 0 : data.useVisitConceptCountLongTerm || 0);
        self.useVisitConceptCountMediumTerm = ko.observable(data.useVisitConceptCountMediumTerm === 0 ? 0 : data.useVisitConceptCountMediumTerm || 0);
        self.useVisitConceptCountShortTerm = ko.observable(data.useVisitConceptCountShortTerm === 0 ? 0 : data.useVisitConceptCountShortTerm || 0);
        self.longTermStartDays = ko.observable(data.longTermStartDays === 0 ? 0 : data.longTermStartDays || -365);
        self.mediumTermStartDays = ko.observable(data.mediumTermStartDays === 0 ? 0 : data.longTermStartDays || -180);
        self.shortTermStartDays = ko.observable(data.shortTermStartDays === 0 ? 0 : data.shortTermStartDays || -30);
        self.endDays = ko.observable(data.endDays === 0 ? 0 : data.endDays || 0);
        self.includedCovariateConceptIds = ko.observable(data.includedCovariateConceptIds === 0 ? "" : data.includedCovariateConceptIds || "");
        self.addDescendantsToInclude = ko.observable(data.addDescendantsToInclude === 0 ? false : data.addDescendantsToInclude  || false);
        self.excludedCovariateConceptIds = ko.observable(data.excludedCovariateConceptIds === 0 ? "" : data.excludedCovariateConceptIds || "");
        self.addDescendantsToExclude = ko.observable(data.addDescendantsToExclude === 0 ? false : data.addDescendantsToExclude || false);
        self.includedCovariateIds = ko.observable(data.includedCovariateIds === 0 ? "" : data.includedCovariateIds || "");
        self.attr_fun = data.attr_fun || "getDbDefaultCovariateData";
        self.attr_class = data.attr_class || "covariateSettings";
	}
	
	return CovariateSettings;
});